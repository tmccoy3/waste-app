generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  username         String            @unique
  firstName        String?
  lastName         String?
  role             UserRole          @default(ANALYST)
  isActive         Boolean           @default(true)
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  auditLogs        AuditLog[]
  createdCustomers Customer[]
  pricingAnalyses  PricingAnalysis[]
  createdRFPs      RFP[]
  sessions         Session[]

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Customer {
  id                String            @id @default(cuid())
  hoaName           String
  fullAddress       String
  city              String?
  state             String?
  zipCode           String?
  latitude          Float?
  longitude         Float?
  monthlyRevenue    Decimal           @db.Decimal(10, 2)
  avgCompletionTime Float
  serviceStatus     ServiceStatus     @default(PENDING)
  unitType          UnitType?
  customerType      CustomerType      @default(HOA)
  numberOfUnits     Int?
  contactEmail      String?
  contactPhone      String?
  contractStartDate DateTime?
  contractEndDate   DateTime?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  createdById       String
  services          CustomerService[]
  createdBy         User              @relation(fields: [createdById], references: [id])
  pricingAnalyses   PricingAnalysis[]
  rfps              RFP[]
  routeAssignments  RouteAssignment[]
  serviceHistory    ServiceHistory[]

  @@index([hoaName])
  @@index([serviceStatus])
  @@index([customerType])
  @@index([latitude, longitude])
  @@index([monthlyRevenue])
  @@index([isActive])
  @@index([createdAt])
  @@map("customers")
}

model CustomerService {
  id                   String           @id @default(cuid())
  customerId           String
  serviceType          ServiceType
  frequency            ServiceFrequency
  trashSize            Int?
  recyclingSize        Int?
  yardWasteRequired    Boolean          @default(false)
  isWalkout            Boolean          @default(false)
  isGated              Boolean          @default(false)
  hasSpecialContainers Boolean          @default(false)
  specialRequirements  Json?
  monthlyPrice         Decimal          @db.Decimal(10, 2)
  isActive             Boolean          @default(true)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  customer             Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([serviceType])
  @@index([frequency])
  @@index([isActive])
  @@map("customer_services")
}

model RFP {
  id              String            @id @default(cuid())
  customerId      String?
  title           String
  description     String?
  location        String
  estimatedHomes  Int?
  unitType        UnitType?
  serviceType     ServiceType
  frequency       ServiceFrequency
  contractValue   Decimal?          @db.Decimal(12, 2)
  contractLength  Int?
  startDate       DateTime?
  endDate         DateTime?
  bidDeadline     DateTime?
  status          RFPStatus         @default(DRAFT)
  requirements    Json?
  documents       Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdById     String
  pricingAnalyses PricingAnalysis[]
  createdBy       User              @relation(fields: [createdById], references: [id])
  customer        Customer?         @relation(fields: [customerId], references: [id])

  @@index([status])
  @@index([serviceType])
  @@index([bidDeadline])
  @@index([createdAt])
  @@map("rfps")
}

model PricingAnalysis {
  id                      String          @id @default(cuid())
  customerId              String?
  rfpId                   String?
  analysisType            AnalysisType
  unitCount               Int
  basePrice               Decimal         @db.Decimal(10, 2)
  walkoutPremium          Decimal         @default(0) @db.Decimal(10, 2)
  gatedPremium            Decimal         @default(0) @db.Decimal(10, 2)
  specialContainerPremium Decimal         @default(0) @db.Decimal(10, 2)
  totalMonthlyRevenue     Decimal         @db.Decimal(10, 2)
  marginPercent           Float
  confidenceLevel         ConfidenceLevel
  riskFlags               Json?
  recommendations         Json?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  createdById             String
  createdBy               User            @relation(fields: [createdById], references: [id])
  customer                Customer?       @relation(fields: [customerId], references: [id])
  rfp                     RFP?            @relation(fields: [rfpId], references: [id])

  @@index([customerId])
  @@index([rfpId])
  @@index([analysisType])
  @@index([confidenceLevel])
  @@index([createdAt])
  @@map("pricing_analyses")
}

model Route {
  id             String            @id @default(cuid())
  name           String
  description    String?
  driverId       String?
  vehicleId      String?
  estimatedTime  Int?
  estimatedMiles Float?
  isActive       Boolean           @default(true)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assignments    RouteAssignment[]

  @@index([driverId])
  @@index([vehicleId])
  @@index([isActive])
  @@map("routes")
}

model RouteAssignment {
  id            String   @id @default(cuid())
  routeId       String
  customerId    String
  order         Int
  estimatedTime Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  route         Route    @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@unique([routeId, customerId])
  @@index([routeId])
  @@index([customerId])
  @@index([order])
  @@map("route_assignments")
}

model ServiceHistory {
  id             String               @id @default(cuid())
  customerId     String
  serviceDate    DateTime
  serviceType    ServiceType
  completionTime Int?
  driverId       String?
  vehicleId      String?
  status         ServiceHistoryStatus
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  customer       Customer             @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([serviceDate])
  @@index([serviceType])
  @@index([status])
  @@map("service_history")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([isActive])
  @@map("system_config")
}

enum UserRole {
  ADMIN
  ANALYST
  OPERATOR
  VIEWER
}

enum ServiceStatus {
  PENDING
  SERVICED
  CANCELLED
  SUSPENDED
}

enum UnitType {
  SINGLE_FAMILY_HOMES
  TOWNHOMES
  CONDOS
  MIXED_RESIDENTIAL
  COMMERCIAL
  UNKNOWN
}

enum CustomerType {
  HOA
  SUBSCRIPTION
  COMMERCIAL
  MUNICIPAL
}

enum ServiceType {
  TRASH
  RECYCLING
  YARD_WASTE
  BULK_PICKUP
  COMMERCIAL_DUMPSTER
}

enum ServiceFrequency {
  WEEKLY
  TWICE_WEEKLY
  THREE_TIMES_WEEKLY
  MONTHLY
  ON_DEMAND
}

enum RFPStatus {
  DRAFT
  PUBLISHED
  BIDDING
  AWARDED
  CANCELLED
  COMPLETED
}

enum AnalysisType {
  INITIAL_QUOTE
  RENEWAL_ANALYSIS
  COMPETITIVE_BID
  ROUTE_OPTIMIZATION
  PROFITABILITY_REVIEW
}

enum ConfidenceLevel {
  HIGH
  MEDIUM
  LOW
}

enum ServiceHistoryStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  MISSED
  CANCELLED
}
